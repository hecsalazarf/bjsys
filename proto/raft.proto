syntax = "proto3";

package raft;
import "messages.proto";

// Client Request
message ClientRequest {
  string client = 1;
  uint64 serial = 2;
  oneof request {
    msgs.CreateRequest create = 3;
    msgs.AckRequest ack = 4;
    msgs.FetchRequest fetch = 5;
  }
}

// Client Response
message ClientResponse {
  uint64 serial = 1;
  oneof response {
    msgs.CreateResponse create = 3;
    msgs.Empty ack = 4;
    msgs.FetchResponse fetch = 5;
  }
}

// An RPC sent by a cluster leader to replicate log entries (§5.3), and as a heartbeat (§5.2).
message AppendEntriesRequest {
  uint64 term = 1;
  uint64 leader_id = 2;
  uint64 prev_log_index = 3;
  uint64 prev_log_term = 4;
  uint64 leader_commit = 5;
  repeated ClientRequest entries = 6;
}

// The response to an AppendEntriesRequest
message AppendEntriesResponse {
  uint64 term = 1;
  bool success = 2;
  ConflictOpt conflict_opt = 3;
}

// A struct used to implement the conflicting term optimization outlined in §5.3 for log replication.
message ConflictOpt {
  uint64 term = 1;
  uint64 index = 2;
}

// A request by the Raft leader to send chunks of a snapshot to a follower (§7).
message InstallSnapshotRequest {
  uint64 term = 1;
  uint64 leader_id = 2;
  uint64 last_included_index = 3;
  uint64 last_included_term = 4;
  uint64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

// The response to an InstallSnapshotRequest.
message InstallSnapshotResponse {
  uint64 term = 1;
}

// A request sent by candidates to gather votes (§5.2).
message VoteRequest {
  uint64 term = 1;
  uint64 candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

// The response to a VoteRequest.
message VoteResponse {
  uint64 term = 1;
  bool vote_granted = 2;
}

service RaftNetwork {
  // Send an AppendEntries RPC to the target Raft node (§5).
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}

  // Send an InstallSnapshot RPC to the target Raft node (§7).
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse) {}

  // Send a RequestVote RPC to the target Raft node (§5).
  rpc Vote(VoteRequest) returns (VoteResponse) {}
}
